generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRE_DATABASE_URL")
}

model User {
  id           String      @id @default(uuid())
  username     String      @unique @db.VarChar(100)
  password     String      @db.VarChar(100)
  email        String      @unique @db.VarChar(100)
  nama_lengkap String      @db.VarChar(100)
  aktif        Boolean     @default(true)
  UserGroup    UserGroup[]
  wali         Wali[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  WaliCreated        Wali[]                @relation("wali_created_by")
  WaliUpdated        Wali[]                @relation("wali_updated_by")
  WaliSantriCreated  WaliSantri[]          @relation("walisantri_created_by")
  WaliSantriUpdated  WaliSantri[]          @relation("walisantri_updated_by")
  SantriCreated      Santri[]              @relation("santri_created_by")
  SantriUpdated      Santri[]              @relation("santri_updated_by")
  KategoriPelCreated KategoriPelanggaran[] @relation("kategoriPel_created_by")
  KategoriPelUpdated KategoriPelanggaran[] @relation("kategoriPel_updated_by")
  KelasCreated       KelasAkademik[]       @relation("kelasAkademik_created_by")
  KelasUpdated       KelasAkademik[]       @relation("kelasAkademik_updated_by")
  KelasSantriCreated KelasSantri[]         @relation("kelasSantri_created_by")
  KelasSantriUpdated KelasSantri[]         @relation("kelasSantri_updated_by")
}

model Group {
  id         Int         @id @default(autoincrement())
  nama_group String      @unique @db.VarChar(100)
  deskripsi  String
  UserGroup  UserGroup[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model UserGroup {
  id       Int    @id @default(autoincrement())
  user_id  String
  group_id Int
  group    Group  @relation(fields: [group_id], references: [id])
  user     User   @relation(fields: [user_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Santri {
  id           Int           @id @default(autoincrement())
  nama_lengkap String        @db.VarChar(100)
  alamat       String        @db.VarChar(255)
  email        String        @db.VarChar(100)
  hp           String?       @db.VarChar(25)
  tempat_lahir String        @db.VarChar(100)
  tgl_lhr      DateTime      @db.Date
  foto         String?       @db.VarChar(100)
  WaliSantri   WaliSantri[]
  KelasSantri  KelasSantri[]

  last_update_by_id String?
  last_update_by    User?   @relation("santri_updated_by", fields: [last_update_by_id], references: [id])
  created_by_id     String?
  created_by        User?   @relation("santri_created_by", fields: [created_by_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model WaliSantri {
  id        Int       @id @default(autoincrement())
  santri_id Int
  wali_id   Int
  peran     PeranWali
  santri    Santri    @relation(fields: [santri_id], references: [id])
  wali      Wali      @relation(fields: [wali_id], references: [id])

  last_update_by_id String?
  last_update_by    User?   @relation("walisantri_updated_by", fields: [last_update_by_id], references: [id])
  created_by_id     String?
  created_by        User?   @relation("walisantri_created_by", fields: [created_by_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Wali {
  id         Int          @id @default(autoincrement())
  nama_wali  String
  tgl_lhr    DateTime     @db.Date
  email      String?      @unique @db.VarChar(100)
  hp         String?
  user_id    String?
  user       User?        @relation(fields: [user_id], references: [id])
  WaliSantri WaliSantri[]

  last_update_by_id String?
  last_update_by    User?   @relation("wali_updated_by", fields: [last_update_by_id], references: [id])
  created_by_id     String?
  created_by        User?   @relation("wali_created_by", fields: [created_by_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([nama_wali, tgl_lhr], name: "waliIdentifier")
}

enum PeranWali {
  AYAH
  IBU
  WALI
  lainnya
}

model KategoriPelanggaran {
  id               Int      @id @default(autoincrement())
  nama_pelanggaran String
  kategori         Kategori
  jenis            String
  poin             Int

  created_by        User?    @relation("kategoriPel_created_by", fields: [created_by_id], references: [id])
  created_by_id     String?
  last_update_by    User?    @relation("kategoriPel_updated_by", fields: [last_update_by_id], references: [id])
  last_update_by_id String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
}

enum Kategori {
  BERAT
  SEDANG
  RINGAN
}

model TingkatanKelas {
  id                Int             @id @default(autoincrement())
  tingkatan         String          @unique @db.VarChar(10)
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  created_by_id     String?
  last_update_by_id String?
  KelasAkademik     KelasAkademik[]
}

model ParalelKelas {
  id                Int             @id @default(autoincrement())
  paralel           String          @unique @db.VarChar(10)
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  created_by_id     String?
  last_update_by_id String?
  KelasAkademik     KelasAkademik[]
}

model TahunAkademik {
  id                Int             @id @default(autoincrement())
  tahun_mulai       Int
  tahun_berakhir    Int
  aktif             Boolean
  created_by_id     String?
  last_update_by_id String?
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  KelasAkademik     KelasAkademik[]

  @@unique([tahun_mulai, tahun_berakhir, aktif], name: "tahunIdentifier")
}

model KelasAkademik {
  id            Int            @id @default(autoincrement())
  Tingkatan     TingkatanKelas @relation(fields: [tingkatan_id], references: [id])
  tingkatan_id  Int
  Paralel       ParalelKelas   @relation(fields: [paralel_id], references: [id])
  paralel_id    Int
  TahunAkademik TahunAkademik  @relation(fields: [ta_id], references: [id])
  ta_id         Int

  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  created_by        User?    @relation("kelasAkademik_created_by", fields: [created_by_id], references: [id])
  created_by_id     String?
  last_update_by    User?    @relation("kelasAkademik_updated_by", fields: [last_update_by_id], references: [id])
  last_update_by_id String?

  KelasSantri KelasSantri[]

  @@unique([tingkatan_id, paralel_id, ta_id], name: "kelasIdentifier")
}

model KelasSantri {
  id        Int           @id @default(autoincrement())
  Kelas     KelasAkademik @relation(fields: [kelas_id], references: [id])
  kelas_id  Int
  Santri    Santri        @relation(fields: [santri_id], references: [id])
  santri_id Int
  status    StatusKelas

  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  created_by        User?    @relation("kelasSantri_created_by", fields: [created_by_id], references: [id])
  created_by_id     String?
  last_update_by    User?    @relation("kelasSantri_updated_by", fields: [last_update_by_id], references: [id])
  last_update_by_id String?

  @@unique([kelas_id, santri_id, status])
}

enum StatusKelas {
  BARU
  ULANG
}
